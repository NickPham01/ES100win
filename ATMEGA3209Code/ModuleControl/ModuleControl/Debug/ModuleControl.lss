
ModuleControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803000  00803000  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010c  00803000  00803000  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000422b  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024f5  00000000  00000000  0000450f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091e  00000000  00000000  00006a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00007324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017b8  00000000  00000000  00007538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a9d  00000000  00000000  00008cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000978d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	21 e3       	ldi	r18, 0x31	; 49
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b0 e3       	ldi	r27, 0x30	; 48
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	ac 30       	cpi	r26, 0x0C	; 12
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  b0:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
		break;
	}
}


int main(void) {	
  b8:	45 ed       	ldi	r20, 0xD5	; 213
  ba:	50 e3       	ldi	r21, 0x30	; 48
  bc:	2b ed       	ldi	r18, 0xDB	; 219
  be:	30 e3       	ldi	r19, 0x30	; 48
  c0:	da 01       	movw	r26, r20
	/* Configure LED0 pin as output */
	for (uint8_t i = 0; i < 6; i++) {
		PINS[UILEDs[i]]->p_port->DIRSET = 1<<(PINS[UILEDs[i]]->num);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	ed 91       	ld	r30, X+
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ee 0f       	add	r30, r30
  cc:	ff 1f       	adc	r31, r31
  ce:	ee 5a       	subi	r30, 0xAE	; 174
  d0:	ff 4c       	sbci	r31, 0xCF	; 207
  d2:	01 90       	ld	r0, Z+
  d4:	f0 81       	ld	r31, Z
  d6:	e0 2d       	mov	r30, r0
  d8:	c1 81       	ldd	r28, Z+1	; 0x01
  da:	d2 81       	ldd	r29, Z+2	; 0x02
  dc:	bc 01       	movw	r22, r24
  de:	00 80       	ld	r0, Z
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x2e>
  e2:	66 0f       	add	r22, r22
  e4:	77 1f       	adc	r23, r23
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <main+0x2a>
  ea:	69 83       	std	Y+1, r22	; 0x01
}


int main(void) {	
	/* Configure LED0 pin as output */
	for (uint8_t i = 0; i < 6; i++) {
  ec:	a2 17       	cp	r26, r18
  ee:	b3 07       	cpc	r27, r19
  f0:	51 f7       	brne	.-44     	; 0xc6 <main+0xe>
	
	uint16_t delay_time = 500;	// ms
	
	while(1) {
		for (uint8_t i = 0; i < 6; i++) {
			PINS[UILEDs[i]]->p_port->OUTSET = 1<<(PINS[UILEDs[i]]->num);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
}


int main(void) {	
  f6:	da 01       	movw	r26, r20
	
	uint16_t delay_time = 500;	// ms
	
	while(1) {
		for (uint8_t i = 0; i < 6; i++) {
			PINS[UILEDs[i]]->p_port->OUTSET = 1<<(PINS[UILEDs[i]]->num);
  f8:	ed 91       	ld	r30, X+
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	ee 5a       	subi	r30, 0xAE	; 174
 102:	ff 4c       	sbci	r31, 0xCF	; 207
 104:	c0 81       	ld	r28, Z
 106:	d1 81       	ldd	r29, Z+1	; 0x01
 108:	69 81       	ldd	r22, Y+1	; 0x01
 10a:	7a 81       	ldd	r23, Y+2	; 0x02
 10c:	7c 01       	movw	r14, r24
 10e:	08 80       	ld	r0, Y
 110:	02 c0       	rjmp	.+4      	; 0x116 <main+0x5e>
 112:	ee 0c       	add	r14, r14
 114:	ff 1c       	adc	r15, r15
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <main+0x5a>
 11a:	eb 01       	movw	r28, r22
 11c:	ed 82       	std	Y+5, r14	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	df e9       	ldi	r29, 0x9F	; 159
 120:	06 e8       	ldi	r16, 0x86	; 134
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	d1 50       	subi	r29, 0x01	; 1
 126:	00 40       	sbci	r16, 0x00	; 0
 128:	10 40       	sbci	r17, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x6c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x76>
 12e:	00 00       	nop
			_delay_ms(delay_time);
			PINS[UILEDs[i]]->p_port->OUTCLR = 1<<(PINS[UILEDs[i]]->num);
 130:	01 90       	ld	r0, Z+
 132:	f0 81       	ld	r31, Z
 134:	e0 2d       	mov	r30, r0
 136:	c1 81       	ldd	r28, Z+1	; 0x01
 138:	d2 81       	ldd	r29, Z+2	; 0x02
 13a:	bc 01       	movw	r22, r24
 13c:	00 80       	ld	r0, Z
 13e:	02 c0       	rjmp	.+4      	; 0x144 <main+0x8c>
 140:	66 0f       	add	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <main+0x88>
 148:	6e 83       	std	Y+6, r22	; 0x06
 14a:	6f e9       	ldi	r22, 0x9F	; 159
 14c:	76 e8       	ldi	r23, 0x86	; 134
 14e:	c1 e0       	ldi	r28, 0x01	; 1
 150:	61 50       	subi	r22, 0x01	; 1
 152:	70 40       	sbci	r23, 0x00	; 0
 154:	c0 40       	sbci	r28, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x98>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xa2>
 15a:	00 00       	nop
	}
	
	uint16_t delay_time = 500;	// ms
	
	while(1) {
		for (uint8_t i = 0; i < 6; i++) {
 15c:	a2 17       	cp	r26, r18
 15e:	b3 07       	cpc	r27, r19
 160:	59 f6       	brne	.-106    	; 0xf8 <main+0x40>
 162:	c9 cf       	rjmp	.-110    	; 0xf6 <main+0x3e>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
