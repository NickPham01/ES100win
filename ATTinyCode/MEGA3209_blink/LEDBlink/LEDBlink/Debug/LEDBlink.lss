
LEDBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00803000  000001ef  00000283  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000081  0000416e  0000016e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000002e3  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a3c  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002205  00000000  00000000  00002db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034b  00000000  00000000  00004fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00005300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000132b  00000000  00000000  00005324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012c  00000000  00000000  0000664f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000677b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  8c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	10 e3       	ldi	r17, 0x30	; 48
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b0 e3       	ldi	r27, 0x30	; 48
  a2:	ef ee       	ldi	r30, 0xEF	; 239
  a4:	f1 e0       	ldi	r31, 0x01	; 1
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 36       	cpi	r26, 0x60	; 96
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "constants.h"

int main (void)
{
  be:	49 ee       	ldi	r20, 0xE9	; 233
  c0:	51 e4       	ldi	r21, 0x41	; 65
  c2:	2f ee       	ldi	r18, 0xEF	; 239
  c4:	31 e4       	ldi	r19, 0x41	; 65
  c6:	da 01       	movw	r26, r20
	/* Configure LED0 pin as output */
	for (uint8_t i = 0; i < 6; i++) {
		PINS[UILEDs[i]]->p_port->DIRSET = 1<<(PINS[UILEDs[i]]->num);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	ed 91       	ld	r30, X+
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	e0 50       	subi	r30, 0x00	; 0
  d6:	f0 4d       	sbci	r31, 0xD0	; 208
  d8:	01 90       	ld	r0, Z+
  da:	f0 81       	ld	r31, Z
  dc:	e0 2d       	mov	r30, r0
  de:	c1 81       	ldd	r28, Z+1	; 0x01
  e0:	d2 81       	ldd	r29, Z+2	; 0x02
  e2:	bc 01       	movw	r22, r24
  e4:	00 80       	ld	r0, Z
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x2e>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x2a>
  f0:	69 83       	std	Y+1, r22	; 0x01
#include "constants.h"

int main (void)
{
	/* Configure LED0 pin as output */
	for (uint8_t i = 0; i < 6; i++) {
  f2:	a2 17       	cp	r26, r18
  f4:	b3 07       	cpc	r27, r19
  f6:	51 f7       	brne	.-44     	; 0xcc <main+0xe>
	
	uint16_t delay_time = 500;	// ms
	
	while(1) {
		for (uint8_t i = 0; i < 6; i++) {
			PINS[UILEDs[i]]->p_port->OUTSET = 1<<(PINS[UILEDs[i]]->num);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
#include <avr/io.h>
#include <util/delay.h>
#include "constants.h"

int main (void)
{
  fc:	da 01       	movw	r26, r20
	
	uint16_t delay_time = 500;	// ms
	
	while(1) {
		for (uint8_t i = 0; i < 6; i++) {
			PINS[UILEDs[i]]->p_port->OUTSET = 1<<(PINS[UILEDs[i]]->num);
  fe:	ed 91       	ld	r30, X+
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e0 50       	subi	r30, 0x00	; 0
 108:	f0 4d       	sbci	r31, 0xD0	; 208
 10a:	c0 81       	ld	r28, Z
 10c:	d1 81       	ldd	r29, Z+1	; 0x01
 10e:	69 81       	ldd	r22, Y+1	; 0x01
 110:	7a 81       	ldd	r23, Y+2	; 0x02
 112:	7c 01       	movw	r14, r24
 114:	08 80       	ld	r0, Y
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0x5e>
 118:	ee 0c       	add	r14, r14
 11a:	ff 1c       	adc	r15, r15
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <main+0x5a>
 120:	eb 01       	movw	r28, r22
 122:	ed 82       	std	Y+5, r14	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	df e9       	ldi	r29, 0x9F	; 159
 126:	06 e8       	ldi	r16, 0x86	; 134
 128:	11 e0       	ldi	r17, 0x01	; 1
 12a:	d1 50       	subi	r29, 0x01	; 1
 12c:	00 40       	sbci	r16, 0x00	; 0
 12e:	10 40       	sbci	r17, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x6c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x76>
 134:	00 00       	nop
			_delay_ms(delay_time);
			PINS[UILEDs[i]]->p_port->OUTCLR = 1<<(PINS[UILEDs[i]]->num);
 136:	01 90       	ld	r0, Z+
 138:	f0 81       	ld	r31, Z
 13a:	e0 2d       	mov	r30, r0
 13c:	c1 81       	ldd	r28, Z+1	; 0x01
 13e:	d2 81       	ldd	r29, Z+2	; 0x02
 140:	bc 01       	movw	r22, r24
 142:	00 80       	ld	r0, Z
 144:	02 c0       	rjmp	.+4      	; 0x14a <main+0x8c>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <main+0x88>
 14e:	6e 83       	std	Y+6, r22	; 0x06
 150:	6f e9       	ldi	r22, 0x9F	; 159
 152:	76 e8       	ldi	r23, 0x86	; 134
 154:	c1 e0       	ldi	r28, 0x01	; 1
 156:	61 50       	subi	r22, 0x01	; 1
 158:	70 40       	sbci	r23, 0x00	; 0
 15a:	c0 40       	sbci	r28, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x98>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0xa2>
 160:	00 00       	nop
	}
	
	uint16_t delay_time = 500;	// ms
	
	while(1) {
		for (uint8_t i = 0; i < 6; i++) {
 162:	a2 17       	cp	r26, r18
 164:	b3 07       	cpc	r27, r19
 166:	59 f6       	brne	.-106    	; 0xfe <main+0x40>
 168:	c9 cf       	rjmp	.-110    	; 0xfc <main+0x3e>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
