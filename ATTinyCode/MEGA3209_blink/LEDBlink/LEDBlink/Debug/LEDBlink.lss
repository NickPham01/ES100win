
LEDBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00803000  00000203  00000297  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000081  00004182  00000182  00000216  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000002f7  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a8e  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002229  00000000  00000000  00002e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000366  00000000  00000000  0000503f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000053a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001317  00000000  00000000  000053cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018f  00000000  00000000  000066e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00006872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  8c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	10 e3       	ldi	r17, 0x30	; 48
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b0 e3       	ldi	r27, 0x30	; 48
  a2:	e3 e0       	ldi	r30, 0x03	; 3
  a4:	f2 e0       	ldi	r31, 0x02	; 2
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 36       	cpi	r26, 0x60	; 96
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include <util/delay.h>
#include "constants.h"
#include "initialize.h"

int main(void)
{
  be:	4d ef       	ldi	r20, 0xFD	; 253
  c0:	51 e4       	ldi	r21, 0x41	; 65
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	92 e4       	ldi	r25, 0x42	; 66
  c6:	da 01       	movw	r26, r20
	// Set LED GPIOs to be outputs
	for (uint8_t i = 0; i < sizeof(UILEDs); i++) {
		uint8_t pin = UILEDs[i];
		bitON(PINS[pin]->p_port->DIR, PINS[pin]->num);	// set the Direction register bits
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	70 e0       	ldi	r23, 0x00	; 0

int main(void)
{
	// Set LED GPIOs to be outputs
	for (uint8_t i = 0; i < sizeof(UILEDs); i++) {
		uint8_t pin = UILEDs[i];
  cc:	ed 91       	ld	r30, X+
		bitON(PINS[pin]->p_port->DIR, PINS[pin]->num);	// set the Direction register bits
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	e0 50       	subi	r30, 0x00	; 0
  d6:	f0 4d       	sbci	r31, 0xD0	; 208
  d8:	c0 81       	ld	r28, Z
  da:	d1 81       	ldd	r29, Z+1	; 0x01
  dc:	e9 81       	ldd	r30, Y+1	; 0x01
  de:	fa 81       	ldd	r31, Y+2	; 0x02
  e0:	10 81       	ld	r17, Z
  e2:	9b 01       	movw	r18, r22
  e4:	08 80       	ld	r0, Y
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x2e>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x2a>
  f0:	21 2b       	or	r18, r17
  f2:	20 83       	st	Z, r18
#include "initialize.h"

int main(void)
{
	// Set LED GPIOs to be outputs
	for (uint8_t i = 0; i < sizeof(UILEDs); i++) {
  f4:	8a 17       	cp	r24, r26
  f6:	9b 07       	cpc	r25, r27
  f8:	49 f7       	brne	.-46     	; 0xcc <main+0xe>
    /* Loop */
    while (1) 
    {
		for (uint8_t i = 0; i < sizeof(UILEDs); i++) {
			uint8_t pin = UILEDs[i];
			gpioON(pin);
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
#include <util/delay.h>
#include "constants.h"
#include "initialize.h"

int main(void)
{
  fe:	da 01       	movw	r26, r20
	
    /* Loop */
    while (1) 
    {
		for (uint8_t i = 0; i < sizeof(UILEDs); i++) {
			uint8_t pin = UILEDs[i];
 100:	ed 91       	ld	r30, X+
			gpioON(pin);
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e0 50       	subi	r30, 0x00	; 0
 10a:	f0 4d       	sbci	r31, 0xD0	; 208
 10c:	c0 81       	ld	r28, Z
 10e:	d1 81       	ldd	r29, Z+1	; 0x01
 110:	e9 81       	ldd	r30, Y+1	; 0x01
 112:	fa 81       	ldd	r31, Y+2	; 0x02
 114:	14 81       	ldd	r17, Z+4	; 0x04
 116:	b9 01       	movw	r22, r18
 118:	08 80       	ld	r0, Y
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x62>
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <main+0x5e>
 124:	61 2b       	or	r22, r17
 126:	64 83       	std	Z+4, r22	; 0x04
	
	
    /* Loop */
    while (1) 
    {
		for (uint8_t i = 0; i < sizeof(UILEDs); i++) {
 128:	8a 17       	cp	r24, r26
 12a:	9b 07       	cpc	r25, r27
 12c:	49 f7       	brne	.-46     	; 0x100 <main+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	e7 ea       	ldi	r30, 0xA7	; 167
 130:	f1 e6       	ldi	r31, 0x61	; 97
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x74>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x7a>
 138:	00 00       	nop
 13a:	da 01       	movw	r26, r20
			uint8_t pin = UILEDs[i];
			gpioON(pin);
		}
		_delay_ms(100);
		for (uint8_t i = 0; i < sizeof(UILEDs); i++) {
			uint8_t pin = UILEDs[i];
 13c:	ed 91       	ld	r30, X+
			gpioOFF(pin);
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	e0 50       	subi	r30, 0x00	; 0
 146:	f0 4d       	sbci	r31, 0xD0	; 208
 148:	01 90       	ld	r0, Z+
 14a:	f0 81       	ld	r31, Z
 14c:	e0 2d       	mov	r30, r0
 14e:	c1 81       	ldd	r28, Z+1	; 0x01
 150:	d2 81       	ldd	r29, Z+2	; 0x02
 152:	7c 81       	ldd	r23, Y+4	; 0x04
 154:	89 01       	movw	r16, r18
 156:	00 80       	ld	r0, Z
 158:	02 c0       	rjmp	.+4      	; 0x15e <main+0xa0>
 15a:	00 0f       	add	r16, r16
 15c:	11 1f       	adc	r17, r17
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <main+0x9c>
 162:	60 2f       	mov	r22, r16
 164:	60 95       	com	r22
 166:	67 23       	and	r22, r23
 168:	6c 83       	std	Y+4, r22	; 0x04
		for (uint8_t i = 0; i < sizeof(UILEDs); i++) {
			uint8_t pin = UILEDs[i];
			gpioON(pin);
		}
		_delay_ms(100);
		for (uint8_t i = 0; i < sizeof(UILEDs); i++) {
 16a:	a8 17       	cp	r26, r24
 16c:	b9 07       	cpc	r27, r25
 16e:	31 f7       	brne	.-52     	; 0x13c <main+0x7e>
 170:	e7 ea       	ldi	r30, 0xA7	; 167
 172:	f1 e6       	ldi	r31, 0x61	; 97
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0xb6>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xbc>
 17a:	00 00       	nop
 17c:	c0 cf       	rjmp	.-128    	; 0xfe <main+0x40>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
