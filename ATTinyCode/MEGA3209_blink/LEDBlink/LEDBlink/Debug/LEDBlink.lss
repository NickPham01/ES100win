
LEDBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803000  00803000  0000066e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00803000  00803000  0000066e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033a7  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002394  00000000  00000000  00003b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000909  00000000  00000000  00005e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  000067a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001560  00000000  00000000  000068d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eb9  00000000  00000000  00007e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00008cf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	20 e3       	ldi	r18, 0x30	; 48
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b0 e3       	ldi	r27, 0x30	; 48
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	ab 30       	cpi	r26, 0x0B	; 11
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <main>
  b0:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <readSwitches>:
			gpioOFF(VCC_9V_2_PORT, VCC_9V_2_PIN);
			gpioON(VCC_12V_2_PORT, VCC_12V_2_PIN);
			
			default:	// 9
			gpioON(VCC_9V_2_PORT, VCC_9V_2_PIN);
			gpioOFF(VCC_12V_2_PORT, VCC_12V_2_PIN);
  b8:	86 b1       	in	r24, 0x06	; 6
  ba:	80 95       	com	r24
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	08 95       	ret

000000c0 <readPlateSensor>:
}

// check plate detect
uint8_t readPlateSensor(enum receiverID receiver) {
	uint8_t sensorReading = 0;
	if (receiver == RECEIVER_1)	 {
  c0:	81 11       	cpse	r24, r1
  c2:	10 c0       	rjmp	.+32     	; 0xe4 <readPlateSensor+0x24>
		sensorReading = ((~PORTC.IN) & 0xC0) >> DETECT0_1_PIN;
  c4:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x700448>
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	80 95       	com	r24
  cc:	90 95       	com	r25
  ce:	80 7c       	andi	r24, 0xC0	; 192
  d0:	99 27       	eor	r25, r25
  d2:	08 2e       	mov	r0, r24
  d4:	89 2f       	mov	r24, r25
  d6:	00 0c       	add	r0, r0
  d8:	88 1f       	adc	r24, r24
  da:	99 0b       	sbc	r25, r25
  dc:	00 0c       	add	r0, r0
  de:	88 1f       	adc	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	08 95       	ret
	} else if (receiver == RECEIVER_2) {
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	81 f4       	brne	.+32     	; 0x108 <readPlateSensor+0x48>
		sensorReading = ((~PORTF.IN) & 0x30) >> DETECT0_2_PIN;
  e8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7004a8>
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	80 95       	com	r24
  f0:	90 95       	com	r25
  f2:	80 73       	andi	r24, 0x30	; 48
  f4:	99 27       	eor	r25, r25
  f6:	95 95       	asr	r25
  f8:	87 95       	ror	r24
  fa:	95 95       	asr	r25
  fc:	87 95       	ror	r24
  fe:	95 95       	asr	r25
 100:	87 95       	ror	r24
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	08 95       	ret
	}
}

// check plate detect
uint8_t readPlateSensor(enum receiverID receiver) {
	uint8_t sensorReading = 0;
 108:	80 e0       	ldi	r24, 0x00	; 0
		sensorReading = ((~PORTF.IN) & 0x30) >> DETECT0_2_PIN;
	}
	
	// now should just be first two bits, active high
	return sensorReading;
}
 10a:	08 95       	ret

0000010c <checkForPlateChange>:

// check if plate has changed
uint8_t checkForPlateChange(enum receiverID receiver, uint8_t prevKnownState) {
 10c:	cf 93       	push	r28
 10e:	c6 2f       	mov	r28, r22
	uint8_t newState = readPlateSensor(receiver);
 110:	0e 94 60 00 	call	0xc0	; 0xc0 <readPlateSensor>

	if (newState != prevKnownState) {
 114:	8c 13       	cpse	r24, r28
 116:	01 c0       	rjmp	.+2      	; 0x11a <checkForPlateChange+0xe>
		return newState;
	}
	
	// if no change, return -1
	return UINT8_MAX;
 118:	8f ef       	ldi	r24, 0xFF	; 255
}
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <setRelay>:


// set relay
void setRelay(enum relayID relay, enum relayState state) {
	uint16_t pulse_width = 10;
	switch(relay) {
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	09 f4       	brne	.+2      	; 0x124 <setRelay+0x6>
 122:	4d c0       	rjmp	.+154    	; 0x1be <setRelay+0xa0>
 124:	28 f4       	brcc	.+10     	; 0x130 <setRelay+0x12>
 126:	88 23       	and	r24, r24
 128:	61 f0       	breq	.+24     	; 0x142 <setRelay+0x24>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	49 f1       	breq	.+82     	; 0x180 <setRelay+0x62>
 12e:	08 95       	ret
 130:	84 30       	cpi	r24, 0x04	; 4
 132:	09 f4       	brne	.+2      	; 0x136 <setRelay+0x18>
 134:	82 c0       	rjmp	.+260    	; 0x23a <setRelay+0x11c>
 136:	08 f4       	brcc	.+2      	; 0x13a <setRelay+0x1c>
 138:	61 c0       	rjmp	.+194    	; 0x1fc <setRelay+0xde>
 13a:	85 30       	cpi	r24, 0x05	; 5
 13c:	09 f4       	brne	.+2      	; 0x140 <setRelay+0x22>
 13e:	a0 c0       	rjmp	.+320    	; 0x280 <setRelay+0x162>
 140:	08 95       	ret
		case K1:
			switch(state) {
 142:	66 23       	and	r22, r22
 144:	19 f0       	breq	.+6      	; 0x14c <setRelay+0x2e>
 146:	61 30       	cpi	r22, 0x01	; 1
 148:	41 f0       	breq	.+16     	; 0x15a <setRelay+0x3c>
 14a:	0d c0       	rjmp	.+26     	; 0x166 <setRelay+0x48>
				case RELAY_ACTIVE:
					gpioON(K1P_PORT, K1P_PIN);
 14c:	e0 e4       	ldi	r30, 0x40	; 64
 14e:	f4 e0       	ldi	r31, 0x04	; 4
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	85 83       	std	Z+5, r24	; 0x05
					gpioOFF(K1N_PORT, K1N_PIN);
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	86 83       	std	Z+6, r24	; 0x06
					break;
 158:	06 c0       	rjmp	.+12     	; 0x166 <setRelay+0x48>
			
				case RELAY_BYPASS:
					gpioOFF(K1P_PORT, K1P_PIN);
 15a:	e0 e4       	ldi	r30, 0x40	; 64
 15c:	f4 e0       	ldi	r31, 0x04	; 4
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	86 83       	std	Z+6, r24	; 0x06
					gpioON(K1N_PORT, K1N_PIN);
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	8f e3       	ldi	r24, 0x3F	; 63
 168:	9f e1       	ldi	r25, 0x1F	; 31
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <setRelay+0x4c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <setRelay+0x52>
 170:	00 00       	nop
					break;
				default:
					break;
			}
			_delay_ms(pulse_width);
			gpioON(K1P_PORT, K1P_PIN);
 172:	e0 e4       	ldi	r30, 0x40	; 64
 174:	f4 e0       	ldi	r31, 0x04	; 4
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	85 83       	std	Z+5, r24	; 0x05
			gpioON(K1N_PORT, K1N_PIN);
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	85 83       	std	Z+5, r24	; 0x05
			break;
 17e:	08 95       	ret
		
		case K2:
			switch(state) {
 180:	66 23       	and	r22, r22
 182:	19 f0       	breq	.+6      	; 0x18a <setRelay+0x6c>
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	41 f0       	breq	.+16     	; 0x198 <setRelay+0x7a>
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <setRelay+0x86>
				case RELAY_ACTIVE:
				gpioON(K2P_PORT, K2P_PIN);
 18a:	e0 e6       	ldi	r30, 0x60	; 96
 18c:	f4 e0       	ldi	r31, 0x04	; 4
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	85 83       	std	Z+5, r24	; 0x05
				gpioOFF(K2N_PORT, K2N_PIN);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	86 83       	std	Z+6, r24	; 0x06
				break;
 196:	06 c0       	rjmp	.+12     	; 0x1a4 <setRelay+0x86>
				
				case RELAY_BYPASS:
				gpioOFF(K2P_PORT, K2P_PIN);
 198:	e0 e6       	ldi	r30, 0x60	; 96
 19a:	f4 e0       	ldi	r31, 0x04	; 4
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	86 83       	std	Z+6, r24	; 0x06
				gpioON(K2N_PORT, K2N_PIN);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	85 83       	std	Z+5, r24	; 0x05
 1a4:	8f e3       	ldi	r24, 0x3F	; 63
 1a6:	9f e1       	ldi	r25, 0x1F	; 31
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <setRelay+0x8a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <setRelay+0x90>
 1ae:	00 00       	nop
				
				default:
				break;
			}
			_delay_ms(pulse_width);
			gpioON(K2P_PORT, K2P_PIN);
 1b0:	e0 e6       	ldi	r30, 0x60	; 96
 1b2:	f4 e0       	ldi	r31, 0x04	; 4
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	85 83       	std	Z+5, r24	; 0x05
			gpioON(K2N_PORT, K2N_PIN);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	85 83       	std	Z+5, r24	; 0x05
			break;
 1bc:	08 95       	ret
		break;
		
		case K3:
			switch(state) {
 1be:	66 23       	and	r22, r22
 1c0:	19 f0       	breq	.+6      	; 0x1c8 <setRelay+0xaa>
 1c2:	61 30       	cpi	r22, 0x01	; 1
 1c4:	41 f0       	breq	.+16     	; 0x1d6 <setRelay+0xb8>
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <setRelay+0xc4>
				case RELAY_ACTIVE:
				gpioON(K3P_PORT, K3P_PIN);
 1c8:	e0 e6       	ldi	r30, 0x60	; 96
 1ca:	f4 e0       	ldi	r31, 0x04	; 4
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	85 83       	std	Z+5, r24	; 0x05
				gpioOFF(K3N_PORT, K3N_PIN);
 1d0:	80 e4       	ldi	r24, 0x40	; 64
 1d2:	86 83       	std	Z+6, r24	; 0x06
				break;
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <setRelay+0xc4>
				
				case RELAY_BYPASS:
				gpioOFF(K3P_PORT, K3P_PIN);
 1d6:	e0 e6       	ldi	r30, 0x60	; 96
 1d8:	f4 e0       	ldi	r31, 0x04	; 4
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	86 83       	std	Z+6, r24	; 0x06
				gpioON(K3N_PORT, K3N_PIN);
 1de:	80 e4       	ldi	r24, 0x40	; 64
 1e0:	85 83       	std	Z+5, r24	; 0x05
 1e2:	8f e3       	ldi	r24, 0x3F	; 63
 1e4:	9f e1       	ldi	r25, 0x1F	; 31
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <setRelay+0xc8>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <setRelay+0xce>
 1ec:	00 00       	nop
				
				default:
				break;
			}
			_delay_ms(pulse_width);
			gpioON(K3P_PORT, K3P_PIN);
 1ee:	e0 e6       	ldi	r30, 0x60	; 96
 1f0:	f4 e0       	ldi	r31, 0x04	; 4
 1f2:	80 e8       	ldi	r24, 0x80	; 128
 1f4:	85 83       	std	Z+5, r24	; 0x05
			gpioON(K3N_PORT, K3N_PIN);
 1f6:	80 e4       	ldi	r24, 0x40	; 64
 1f8:	85 83       	std	Z+5, r24	; 0x05
			break;
 1fa:	08 95       	ret
		break;
		
		case K4:
			switch(state) {
 1fc:	66 23       	and	r22, r22
 1fe:	19 f0       	breq	.+6      	; 0x206 <setRelay+0xe8>
 200:	61 30       	cpi	r22, 0x01	; 1
 202:	41 f0       	breq	.+16     	; 0x214 <setRelay+0xf6>
 204:	0d c0       	rjmp	.+26     	; 0x220 <setRelay+0x102>
				case RELAY_ACTIVE:
				gpioON(K4P_PORT, K4P_PIN);
 206:	e0 e8       	ldi	r30, 0x80	; 128
 208:	f4 e0       	ldi	r31, 0x04	; 4
 20a:	88 e0       	ldi	r24, 0x08	; 8
 20c:	85 83       	std	Z+5, r24	; 0x05
				gpioOFF(K4N_PORT, K4N_PIN);
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	86 83       	std	Z+6, r24	; 0x06
				break;
 212:	06 c0       	rjmp	.+12     	; 0x220 <setRelay+0x102>
				
				case RELAY_BYPASS:
				gpioOFF(K4P_PORT, K4P_PIN);
 214:	e0 e8       	ldi	r30, 0x80	; 128
 216:	f4 e0       	ldi	r31, 0x04	; 4
 218:	88 e0       	ldi	r24, 0x08	; 8
 21a:	86 83       	std	Z+6, r24	; 0x06
				gpioON(K4N_PORT, K4N_PIN);
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	85 83       	std	Z+5, r24	; 0x05
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9f e1       	ldi	r25, 0x1F	; 31
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <setRelay+0x106>
 228:	00 c0       	rjmp	.+0      	; 0x22a <setRelay+0x10c>
 22a:	00 00       	nop
				
				default:
				break;
			}
			_delay_ms(pulse_width);
			gpioON(K4P_PORT, K4P_PIN);
 22c:	e0 e8       	ldi	r30, 0x80	; 128
 22e:	f4 e0       	ldi	r31, 0x04	; 4
 230:	88 e0       	ldi	r24, 0x08	; 8
 232:	85 83       	std	Z+5, r24	; 0x05
			gpioON(K4N_PORT, K4N_PIN);
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	85 83       	std	Z+5, r24	; 0x05
			break;
 238:	08 95       	ret
		break;
		
		case R1K:
			switch(state) {
 23a:	66 23       	and	r22, r22
 23c:	19 f0       	breq	.+6      	; 0x244 <setRelay+0x126>
 23e:	61 30       	cpi	r22, 0x01	; 1
 240:	51 f0       	breq	.+20     	; 0x256 <setRelay+0x138>
 242:	11 c0       	rjmp	.+34     	; 0x266 <setRelay+0x148>
				case RELAY_ACTIVE:
				gpioON(R1KP_PORT, R1KP_PIN);
 244:	e0 e6       	ldi	r30, 0x60	; 96
 246:	f4 e0       	ldi	r31, 0x04	; 4
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	85 83       	std	Z+5, r24	; 0x05
				gpioOFF(R1KN_PORT, R1KN_PIN);
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	86 83       	std	Z+6, r24	; 0x06
};

void setDebugLED(enum receiverID receiver, uint8_t state) {
	if (receiver == RECEIVER_1) {
		if (state) {
			gpioON(PORTA, 2);
 250:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 254:	08 c0       	rjmp	.+16     	; 0x266 <setRelay+0x148>
				gpioOFF(R1KN_PORT, R1KN_PIN);
				setDebugLED(RECEIVER_1, 1);
				break;
				
				case RELAY_BYPASS:
				gpioOFF(R1KP_PORT, R1KP_PIN);
 256:	e0 e6       	ldi	r30, 0x60	; 96
 258:	f4 e0       	ldi	r31, 0x04	; 4
 25a:	88 e0       	ldi	r24, 0x08	; 8
 25c:	86 83       	std	Z+6, r24	; 0x06
				gpioON(R1KN_PORT, R1KN_PIN);
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	85 83       	std	Z+5, r24	; 0x05
void setDebugLED(enum receiverID receiver, uint8_t state) {
	if (receiver == RECEIVER_1) {
		if (state) {
			gpioON(PORTA, 2);
		} else {
			gpioOFF(PORTA, 2);
 262:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
 266:	8f e3       	ldi	r24, 0x3F	; 63
 268:	9f e1       	ldi	r25, 0x1F	; 31
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <setRelay+0x14c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <setRelay+0x152>
 270:	00 00       	nop
				
				default:
				break;
			}
			_delay_ms(pulse_width);
			gpioON(R1KP_PORT, R1KP_PIN);
 272:	e0 e6       	ldi	r30, 0x60	; 96
 274:	f4 e0       	ldi	r31, 0x04	; 4
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	85 83       	std	Z+5, r24	; 0x05
			gpioON(R1KN_PORT, R1KN_PIN);
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	85 83       	std	Z+5, r24	; 0x05
			break;
 27e:	08 95       	ret
		break;
		
		case R2K:
			switch(state) {
 280:	66 23       	and	r22, r22
 282:	19 f0       	breq	.+6      	; 0x28a <setRelay+0x16c>
 284:	61 30       	cpi	r22, 0x01	; 1
 286:	59 f0       	breq	.+22     	; 0x29e <setRelay+0x180>
 288:	13 c0       	rjmp	.+38     	; 0x2b0 <setRelay+0x192>
				case RELAY_ACTIVE:
				gpioON(R2KP_PORT, R2KP_PIN);
 28a:	e0 e6       	ldi	r30, 0x60	; 96
 28c:	f4 e0       	ldi	r31, 0x04	; 4
 28e:	80 e2       	ldi	r24, 0x20	; 32
 290:	85 83       	std	Z+5, r24	; 0x05
				gpioOFF(R2KN_PORT, R2KN_PIN);
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	86 83       	std	Z+6, r24	; 0x06
		} else {
			gpioOFF(PORTA, 2);
		}
	} else {
		if (state) {
			gpioON(PORTA, 3);
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 29c:	09 c0       	rjmp	.+18     	; 0x2b0 <setRelay+0x192>
				gpioOFF(R2KN_PORT, R2KN_PIN);
				setDebugLED(RECEIVER_2, 1);
				break;
				
				case RELAY_BYPASS:
				gpioOFF(R2KP_PORT, R2KP_PIN);
 29e:	e0 e6       	ldi	r30, 0x60	; 96
 2a0:	f4 e0       	ldi	r31, 0x04	; 4
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	86 83       	std	Z+6, r24	; 0x06
				gpioON(R2KN_PORT, R2KN_PIN);
 2a6:	80 e1       	ldi	r24, 0x10	; 16
 2a8:	85 83       	std	Z+5, r24	; 0x05
		}
	} else {
		if (state) {
			gpioON(PORTA, 3);
			} else {
			gpioOFF(PORTA, 3);
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
 2b0:	8f e3       	ldi	r24, 0x3F	; 63
 2b2:	9f e1       	ldi	r25, 0x1F	; 31
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <setRelay+0x196>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <setRelay+0x19c>
 2ba:	00 00       	nop
				
				default:
				break;
			}
			_delay_ms(pulse_width);
			gpioON(R2KP_PORT, R2KP_PIN);
 2bc:	e0 e6       	ldi	r30, 0x60	; 96
 2be:	f4 e0       	ldi	r31, 0x04	; 4
 2c0:	80 e2       	ldi	r24, 0x20	; 32
 2c2:	85 83       	std	Z+5, r24	; 0x05
			gpioON(R2KN_PORT, R2KN_PIN);
 2c4:	80 e1       	ldi	r24, 0x10	; 16
 2c6:	85 83       	std	Z+5, r24	; 0x05
 2c8:	08 95       	ret

000002ca <setRoutingRelays>:
}


// set routing relays
void setRoutingRelays(uint8_t output, enum routingState state) {
	switch(output) {
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	79 f5       	brne	.+94     	; 0x32c <setRoutingRelays+0x62>
		case 1:
			switch(state) {
 2ce:	61 30       	cpi	r22, 0x01	; 1
 2d0:	99 f0       	breq	.+38     	; 0x2f8 <setRoutingRelays+0x2e>
 2d2:	18 f0       	brcs	.+6      	; 0x2da <setRoutingRelays+0x10>
 2d4:	62 30       	cpi	r22, 0x02	; 2
 2d6:	f9 f0       	breq	.+62     	; 0x316 <setRoutingRelays+0x4c>
 2d8:	08 95       	ret
				case ROUTING_STATE_STRAIGHT:
					setRelay(K1, RELAY_BYPASS);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
					setRelay(K2, RELAY_BYPASS);
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
		data = 1<<4;
		break;
	}
	
	if (state) {
		PORTA.OUTSET = data;
 2ea:	e0 e0       	ldi	r30, 0x00	; 0
 2ec:	f4 e0       	ldi	r31, 0x04	; 4
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	85 83       	std	Z+5, r24	; 0x05
	}
	else {
		PORTA.OUTCLR = data;
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	86 83       	std	Z+6, r24	; 0x06
 2f6:	08 95       	ret
					setRelay(K2, RELAY_BYPASS);
					setLED(BOTTOM_STRAIGHT, 1);
					setLED(DOWN_CROSS, 0);
					break;
				case ROUTING_STATE_CROSS:
					setRelay(K1, RELAY_BYPASS);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
					setRelay(K2, RELAY_ACTIVE);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
	
	if (state) {
		PORTA.OUTSET = data;
	}
	else {
		PORTA.OUTCLR = data;
 308:	e0 e0       	ldi	r30, 0x00	; 0
 30a:	f4 e0       	ldi	r31, 0x04	; 4
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	86 83       	std	Z+6, r24	; 0x06
		data = 1<<4;
		break;
	}
	
	if (state) {
		PORTA.OUTSET = data;
 310:	80 e1       	ldi	r24, 0x10	; 16
 312:	85 83       	std	Z+5, r24	; 0x05
 314:	08 95       	ret
					setRelay(K2, RELAY_ACTIVE);
					setLED(BOTTOM_STRAIGHT, 0);
					setLED(DOWN_CROSS, 1);
					break;
				case ROUTING_STATE_SUM:
					setRelay(K1, RELAY_ACTIVE);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
		data = 1<<4;
		break;
	}
	
	if (state) {
		PORTA.OUTSET = data;
 31e:	e0 e0       	ldi	r30, 0x00	; 0
 320:	f4 e0       	ldi	r31, 0x04	; 4
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	85 83       	std	Z+5, r24	; 0x05
 326:	80 e1       	ldi	r24, 0x10	; 16
 328:	85 83       	std	Z+5, r24	; 0x05
 32a:	08 95       	ret
					setLED(DOWN_CROSS, 1);
					break;
			}
			break;
		default:	// output 2
			switch(state) {
 32c:	61 30       	cpi	r22, 0x01	; 1
 32e:	99 f0       	breq	.+38     	; 0x356 <setRoutingRelays+0x8c>
 330:	18 f0       	brcs	.+6      	; 0x338 <setRoutingRelays+0x6e>
 332:	62 30       	cpi	r22, 0x02	; 2
 334:	f9 f0       	breq	.+62     	; 0x374 <setRoutingRelays+0xaa>
 336:	08 95       	ret
				case ROUTING_STATE_STRAIGHT:
					setRelay(K4, RELAY_BYPASS);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
					setRelay(K3, RELAY_BYPASS);
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
		data = 1<<4;
		break;
	}
	
	if (state) {
		PORTA.OUTSET = data;
 348:	e0 e0       	ldi	r30, 0x00	; 0
 34a:	f4 e0       	ldi	r31, 0x04	; 4
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	85 83       	std	Z+5, r24	; 0x05
	}
	else {
		PORTA.OUTCLR = data;
 350:	80 e2       	ldi	r24, 0x20	; 32
 352:	86 83       	std	Z+6, r24	; 0x06
 354:	08 95       	ret
					setRelay(K3, RELAY_BYPASS);
					setLED(TOP_STRAIGHT, 1);
					setLED(UP_CROSS, 0);
					break;
				case ROUTING_STATE_CROSS:
					setRelay(K4, RELAY_BYPASS);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
					setRelay(K3, RELAY_ACTIVE);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
	
	if (state) {
		PORTA.OUTSET = data;
	}
	else {
		PORTA.OUTCLR = data;
 366:	e0 e0       	ldi	r30, 0x00	; 0
 368:	f4 e0       	ldi	r31, 0x04	; 4
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	86 83       	std	Z+6, r24	; 0x06
		data = 1<<4;
		break;
	}
	
	if (state) {
		PORTA.OUTSET = data;
 36e:	80 e2       	ldi	r24, 0x20	; 32
 370:	85 83       	std	Z+5, r24	; 0x05
 372:	08 95       	ret
					setRelay(K3, RELAY_ACTIVE);
					setLED(TOP_STRAIGHT, 0);
					setLED(UP_CROSS, 1);
					break;
				case ROUTING_STATE_SUM:
					setRelay(K4, RELAY_ACTIVE);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
		data = 1<<4;
		break;
	}
	
	if (state) {
		PORTA.OUTSET = data;
 37c:	e0 e0       	ldi	r30, 0x00	; 0
 37e:	f4 e0       	ldi	r31, 0x04	; 4
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	85 83       	std	Z+5, r24	; 0x05
 384:	80 e2       	ldi	r24, 0x20	; 32
 386:	85 83       	std	Z+5, r24	; 0x05
 388:	08 95       	ret

0000038a <initialize>:
/*******************************************************************************************************
	INITIALIZATION
********************************************************************************************************/

// Initialize
void initialize(void) {
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
	// Set LEDs to output
	PORTA.DIRSET = 0x3F;	// 0b 0011 0011		all leds
 38e:	8f e3       	ldi	r24, 0x3F	; 63
 390:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
	
	// Set Relays to output
	PORTC.DIRSET = 0x0C;	// 0b 0000 1100		K1 pins
 394:	a0 e4       	ldi	r26, 0x40	; 64
 396:	b4 e0       	ldi	r27, 0x04	; 4
 398:	8c e0       	ldi	r24, 0x0C	; 12
 39a:	11 96       	adiw	r26, 0x01	; 1
 39c:	8c 93       	st	X, r24
 39e:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = 0xFF;	// 0b 1111 1111		K2, K3, K5, and K6 pins
 3a0:	9f ef       	ldi	r25, 0xFF	; 255
 3a2:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__TEXT_REGION_LENGTH__+0x700461>
	PORTE.DIRSET = 0x0C;	// 0b 0000 1100		K4 pins
 3a6:	e0 e8       	ldi	r30, 0x80	; 128
 3a8:	f4 e0       	ldi	r31, 0x04	; 4
 3aa:	81 83       	std	Z+1, r24	; 0x01
	
	// Set VCC control pins to output
	PORTC.DIRSET = 0x03;	// 0b 0000 0011		Receiver 1 VCC control pins
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	11 96       	adiw	r26, 0x01	; 1
 3b0:	8c 93       	st	X, r24
 3b2:	11 97       	sbiw	r26, 0x01	; 1
	PORTE.DIRSET = 0x03;	// 0b 0000 0011		Receiver 2 VCC control pins
 3b4:	81 83       	std	Z+1, r24	; 0x01
	
	// Set switches to input
	PORTB.DIRCLR = 0x0F;	// 0b 0000 1111		all UI switches
 3b6:	e0 e2       	ldi	r30, 0x20	; 32
 3b8:	f4 e0       	ldi	r31, 0x04	; 4
 3ba:	8f e0       	ldi	r24, 0x0F	; 15
 3bc:	82 83       	std	Z+2, r24	; 0x02

	// Set plate detect to input
	PORTC.DIRCLR = 0xC0;	// 0b 1100 0000		plate detect0 and 1 for Receiver 1
 3be:	80 ec       	ldi	r24, 0xC0	; 192
 3c0:	12 96       	adiw	r26, 0x02	; 2
 3c2:	8c 93       	st	X, r24
 3c4:	12 97       	sbiw	r26, 0x02	; 2
	PORTF.DIRCLR = 0x30;	// 0b 0011 0000		plate detect0 and 1 for Receiver 2
 3c6:	c0 ea       	ldi	r28, 0xA0	; 160
 3c8:	d4 e0       	ldi	r29, 0x04	; 4
 3ca:	80 e3       	ldi	r24, 0x30	; 48
 3cc:	8a 83       	std	Y+2, r24	; 0x02
	
	// set switches to have pullups enabled
	PORTB.PIN0CTRL |= 0x08;
 3ce:	80 89       	ldd	r24, Z+16	; 0x10
 3d0:	88 60       	ori	r24, 0x08	; 8
 3d2:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL |= 0x08;
 3d4:	81 89       	ldd	r24, Z+17	; 0x11
 3d6:	88 60       	ori	r24, 0x08	; 8
 3d8:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL |= 0x08;
 3da:	82 89       	ldd	r24, Z+18	; 0x12
 3dc:	88 60       	ori	r24, 0x08	; 8
 3de:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL |= 0x08;
 3e0:	83 89       	ldd	r24, Z+19	; 0x13
 3e2:	88 60       	ori	r24, 0x08	; 8
 3e4:	83 8b       	std	Z+19, r24	; 0x13
	
	// set plate detect pins to have pullups enabled
	PORTC.PIN6CTRL |= 0x08;
 3e6:	56 96       	adiw	r26, 0x16	; 22
 3e8:	8c 91       	ld	r24, X
 3ea:	56 97       	sbiw	r26, 0x16	; 22
 3ec:	88 60       	ori	r24, 0x08	; 8
 3ee:	56 96       	adiw	r26, 0x16	; 22
 3f0:	8c 93       	st	X, r24
 3f2:	56 97       	sbiw	r26, 0x16	; 22
	PORTC.PIN7CTRL |= 0x08;
 3f4:	57 96       	adiw	r26, 0x17	; 23
 3f6:	8c 91       	ld	r24, X
 3f8:	57 97       	sbiw	r26, 0x17	; 23
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	57 96       	adiw	r26, 0x17	; 23
 3fe:	8c 93       	st	X, r24
	PORTF.PIN4CTRL |= 0x08;
 400:	8c 89       	ldd	r24, Y+20	; 0x14
 402:	88 60       	ori	r24, 0x08	; 8
 404:	8c 8b       	std	Y+20, r24	; 0x14
	PORTF.PIN5CTRL |= 0x08;
 406:	8d 89       	ldd	r24, Y+21	; 0x15
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	8d 8b       	std	Y+21, r24	; 0x15

	// set up the timer
	//setupTimer();
	
	// initialize the values of the button states
	switch_vals = readSwitches();
 40c:	0e 94 5c 00 	call	0xb8	; 0xb8 <readSwitches>
 410:	80 93 07 30 	sts	0x3007, r24	; 0x803007 <switch_vals>
	bottom_straight_button_state	= switch_vals & BOTTOM_STRAIGHT_BTN_MASK;
 414:	98 2f       	mov	r25, r24
 416:	91 70       	andi	r25, 0x01	; 1
 418:	90 93 09 30 	sts	0x3009, r25	; 0x803009 <bottom_straight_button_state>
	top_straight_button_state		= switch_vals & TOP_STRAIGHT_BTN_MASK;
 41c:	98 2f       	mov	r25, r24
 41e:	98 70       	andi	r25, 0x08	; 8
 420:	90 93 02 30 	sts	0x3002, r25	; 0x803002 <top_straight_button_state>
	up_cross_button_state			= switch_vals & UP_CROSS_BTN_MASK;
 424:	98 2f       	mov	r25, r24
 426:	92 70       	andi	r25, 0x02	; 2
 428:	90 93 01 30 	sts	0x3001, r25	; 0x803001 <up_cross_button_state>
	down_cross_button_state			= switch_vals & DOWN_CROSS_BTN_MASK;
 42c:	84 70       	andi	r24, 0x04	; 4
 42e:	80 93 00 30 	sts	0x3000, r24	; 0x803000 <_edata>

}
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <updateRoutingState>:
********************************************************************************************************/

enum routingState topRoutingUIState;
enum routingState bottomRoutingUIState;

void updateRoutingState(enum routingState *currentState, uint8_t new_straight_button_state, uint8_t new_cross_button_state) {
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
	enum routingState newState = *currentState;
	
	switch(*currentState) {
 43e:	fc 01       	movw	r30, r24
 440:	20 81       	ld	r18, Z
 442:	21 30       	cpi	r18, 0x01	; 1
 444:	49 f0       	breq	.+18     	; 0x458 <updateRoutingState+0x20>
 446:	18 f0       	brcs	.+6      	; 0x44e <updateRoutingState+0x16>
 448:	22 30       	cpi	r18, 0x02	; 2
 44a:	59 f0       	breq	.+22     	; 0x462 <updateRoutingState+0x2a>
 44c:	20 c0       	rjmp	.+64     	; 0x48e <updateRoutingState+0x56>
		case ROUTING_STATE_STRAIGHT:
			if (new_straight_button_state) {
 44e:	61 11       	cpse	r22, r1
 450:	0d c0       	rjmp	.+26     	; 0x46c <updateRoutingState+0x34>
				newState = ROUTING_STATE_CROSS;
			}
			else if (new_cross_button_state) {
 452:	41 11       	cpse	r20, r1
 454:	0d c0       	rjmp	.+26     	; 0x470 <updateRoutingState+0x38>
 456:	1b c0       	rjmp	.+54     	; 0x48e <updateRoutingState+0x56>
				newState = ROUTING_STATE_SUM;
			}
			break;
			
		case ROUTING_STATE_CROSS:
			if (new_straight_button_state) {
 458:	61 11       	cpse	r22, r1
 45a:	0c c0       	rjmp	.+24     	; 0x474 <updateRoutingState+0x3c>
				newState = ROUTING_STATE_SUM;
			}
			else if (new_cross_button_state) {
 45c:	41 11       	cpse	r20, r1
 45e:	0c c0       	rjmp	.+24     	; 0x478 <updateRoutingState+0x40>
 460:	16 c0       	rjmp	.+44     	; 0x48e <updateRoutingState+0x56>
				newState = ROUTING_STATE_STRAIGHT;
			}
			break;
		
		case ROUTING_STATE_SUM:
			if (new_straight_button_state) {
 462:	61 11       	cpse	r22, r1
 464:	0b c0       	rjmp	.+22     	; 0x47c <updateRoutingState+0x44>
				newState = ROUTING_STATE_CROSS;
			}
			else if (new_cross_button_state) {
 466:	41 11       	cpse	r20, r1
 468:	0b c0       	rjmp	.+22     	; 0x480 <updateRoutingState+0x48>
 46a:	11 c0       	rjmp	.+34     	; 0x48e <updateRoutingState+0x56>
	enum routingState newState = *currentState;
	
	switch(*currentState) {
		case ROUTING_STATE_STRAIGHT:
			if (new_straight_button_state) {
				newState = ROUTING_STATE_CROSS;
 46c:	11 e0       	ldi	r17, 0x01	; 1
 46e:	09 c0       	rjmp	.+18     	; 0x482 <updateRoutingState+0x4a>
			}
			else if (new_cross_button_state) {
				newState = ROUTING_STATE_SUM;
 470:	12 e0       	ldi	r17, 0x02	; 2
 472:	07 c0       	rjmp	.+14     	; 0x482 <updateRoutingState+0x4a>
			}
			break;
			
		case ROUTING_STATE_CROSS:
			if (new_straight_button_state) {
				newState = ROUTING_STATE_SUM;
 474:	12 e0       	ldi	r17, 0x02	; 2
 476:	05 c0       	rjmp	.+10     	; 0x482 <updateRoutingState+0x4a>
			}
			else if (new_cross_button_state) {
				newState = ROUTING_STATE_STRAIGHT;
 478:	10 e0       	ldi	r17, 0x00	; 0
 47a:	03 c0       	rjmp	.+6      	; 0x482 <updateRoutingState+0x4a>
			}
			break;
		
		case ROUTING_STATE_SUM:
			if (new_straight_button_state) {
				newState = ROUTING_STATE_CROSS;
 47c:	11 e0       	ldi	r17, 0x01	; 1
 47e:	01 c0       	rjmp	.+2      	; 0x482 <updateRoutingState+0x4a>
			}
			else if (new_cross_button_state) {
				newState = ROUTING_STATE_STRAIGHT;
 480:	10 e0       	ldi	r17, 0x00	; 0
 482:	ec 01       	movw	r28, r24
			}
			break;
	}
	
	if (newState != *currentState) {
		setRoutingRelays(1, newState);
 484:	61 2f       	mov	r22, r17
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 65 01 	call	0x2ca	; 0x2ca <setRoutingRelays>
		*currentState = newState;
 48c:	18 83       	st	Y, r17
	}
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	08 95       	ret

00000496 <updateReceiver>:

void updateReceiver(enum receiverID receiver, uint8_t *prevstate, uint8_t *newstate) {
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	c8 2f       	mov	r28, r24
 4a2:	8b 01       	movw	r16, r22
 4a4:	7a 01       	movw	r14, r20
	*newstate = checkForPlateChange(receiver, *prevstate);
 4a6:	fb 01       	movw	r30, r22
 4a8:	60 81       	ld	r22, Z
 4aa:	0e 94 86 00 	call	0x10c	; 0x10c <checkForPlateChange>
 4ae:	f7 01       	movw	r30, r14
 4b0:	80 83       	st	Z, r24
	
	// setReceiverVCC(receiver, readVCCswitches(receiver));
	
	if (*newstate != UINT8_MAX) {
 4b2:	8f 3f       	cpi	r24, 0xFF	; 255
 4b4:	c9 f0       	breq	.+50     	; 0x4e8 <updateReceiver+0x52>
		*prevstate = *newstate;
 4b6:	f8 01       	movw	r30, r16
 4b8:	80 83       	st	Z, r24
		
		if (receiver == RECEIVER_1) {
 4ba:	c1 11       	cpse	r28, r1
 4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <updateReceiver+0x3c>
			setRelay(R1K, decodePlateState(*newstate));
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	f7 01       	movw	r30, r14
 4c2:	80 81       	ld	r24, Z
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	09 f4       	brne	.+2      	; 0x4ca <updateReceiver+0x34>
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
 4d0:	0b c0       	rjmp	.+22     	; 0x4e8 <updateReceiver+0x52>
		} else if (receiver == RECEIVER_2) {
 4d2:	c1 30       	cpi	r28, 0x01	; 1
 4d4:	49 f4       	brne	.+18     	; 0x4e8 <updateReceiver+0x52>
			setRelay(R2K, decodePlateState(*newstate));
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	f7 01       	movw	r30, r14
 4da:	80 81       	ld	r24, Z
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	09 f4       	brne	.+2      	; 0x4e2 <updateReceiver+0x4c>
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	85 e0       	ldi	r24, 0x05	; 5
 4e4:	0e 94 8f 00 	call	0x11e	; 0x11e <setRelay>
		}
	}

}
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	ff 90       	pop	r15
 4f0:	ef 90       	pop	r14
 4f2:	08 95       	ret

000004f4 <main>:
/*******************************************************************************************************
	MAIN
********************************************************************************************************/


int main (void) {
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <main+0x6>
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <main+0x8>
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
	initialize();
 500:	0e 94 c5 01 	call	0x38a	; 0x38a <initialize>
			case 12:
			gpioOFF(VCC_9V_1_PORT, VCC_9V_1_PIN);
			gpioON(VCC_12V_1_PORT, VCC_12V_1_PIN);
			
			default:	// 9
			gpioON(VCC_9V_1_PORT, VCC_9V_1_PIN);
 504:	e0 e4       	ldi	r30, 0x40	; 64
 506:	f4 e0       	ldi	r31, 0x04	; 4
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	95 83       	std	Z+5, r25	; 0x05
			gpioOFF(VCC_12V_1_PORT, VCC_12V_1_PIN);
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	86 83       	std	Z+6, r24	; 0x06
			case 12:
			gpioOFF(VCC_9V_2_PORT, VCC_9V_2_PIN);
			gpioON(VCC_12V_2_PORT, VCC_12V_2_PIN);
			
			default:	// 9
			gpioON(VCC_9V_2_PORT, VCC_9V_2_PIN);
 510:	e0 e8       	ldi	r30, 0x80	; 128
 512:	f4 e0       	ldi	r31, 0x04	; 4
 514:	95 83       	std	Z+5, r25	; 0x05
			gpioOFF(VCC_12V_2_PORT, VCC_12V_2_PIN);
 516:	86 83       	std	Z+6, r24	; 0x06
	initialize();
	setReceiverVCC(RECEIVER_1, 9);
	setReceiverVCC(RECEIVER_2, 9);
	
	//uint8_t switch_vals;
	uint8_t receiver1_prevstate = UINT8_MAX - 1;
 518:	8e ef       	ldi	r24, 0xFE	; 254
 51a:	89 83       	std	Y+1, r24	; 0x01
	uint8_t receiver1_newstate	= 0;
 51c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t receiver2_prevstate = UINT8_MAX - 1;
 51e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t receiver2_newstate	= 0;
 520:	1c 82       	std	Y+4, r1	; 0x04
	
	setRoutingRelays(1, ROUTING_STATE_CROSS);
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 65 01 	call	0x2ca	; 0x2ca <setRoutingRelays>
	setRoutingRelays(2, ROUTING_STATE_CROSS);
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	0e 94 65 01 	call	0x2ca	; 0x2ca <setRoutingRelays>
 532:	2f ef       	ldi	r18, 0xFF	; 255
 534:	81 ee       	ldi	r24, 0xE1	; 225
 536:	94 e0       	ldi	r25, 0x04	; 4
 538:	21 50       	subi	r18, 0x01	; 1
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	90 40       	sbci	r25, 0x00	; 0
 53e:	e1 f7       	brne	.-8      	; 0x538 <main+0x44>
 540:	00 c0       	rjmp	.+0      	; 0x542 <main+0x4e>
 542:	00 00       	nop
	
	_delay_ms(500);
	
	setRoutingRelays(1, ROUTING_STATE_SUM);
 544:	62 e0       	ldi	r22, 0x02	; 2
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 65 01 	call	0x2ca	; 0x2ca <setRoutingRelays>
	setRoutingRelays(2, ROUTING_STATE_SUM);
 54c:	62 e0       	ldi	r22, 0x02	; 2
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	0e 94 65 01 	call	0x2ca	; 0x2ca <setRoutingRelays>
 554:	2f ef       	ldi	r18, 0xFF	; 255
 556:	81 ee       	ldi	r24, 0xE1	; 225
 558:	94 e0       	ldi	r25, 0x04	; 4
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	80 40       	sbci	r24, 0x00	; 0
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <main+0x66>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0x70>
 564:	00 00       	nop
	
	_delay_ms(500);
	setRoutingRelays(1, ROUTING_STATE_STRAIGHT);
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 65 01 	call	0x2ca	; 0x2ca <setRoutingRelays>
	setRoutingRelays(2, ROUTING_STATE_STRAIGHT);
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	0e 94 65 01 	call	0x2ca	; 0x2ca <setRoutingRelays>
 576:	2f ef       	ldi	r18, 0xFF	; 255
 578:	81 ee       	ldi	r24, 0xE1	; 225
 57a:	94 e0       	ldi	r25, 0x04	; 4
 57c:	21 50       	subi	r18, 0x01	; 1
 57e:	80 40       	sbci	r24, 0x00	; 0
 580:	90 40       	sbci	r25, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <main+0x88>
 584:	00 c0       	rjmp	.+0      	; 0x586 <main+0x92>
 586:	00 00       	nop
	
	_delay_ms(500);
	
	while(1) {
		
		updateReceiver(RECEIVER_1, &receiver1_prevstate, &receiver1_newstate);
 588:	ae 01       	movw	r20, r28
 58a:	4e 5f       	subi	r20, 0xFE	; 254
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	be 01       	movw	r22, r28
 590:	6f 5f       	subi	r22, 0xFF	; 255
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 4b 02 	call	0x496	; 0x496 <updateReceiver>
		updateReceiver(RECEIVER_2, &receiver2_prevstate, &receiver2_newstate);
 59a:	ae 01       	movw	r20, r28
 59c:	4c 5f       	subi	r20, 0xFC	; 252
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	be 01       	movw	r22, r28
 5a2:	6d 5f       	subi	r22, 0xFD	; 253
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	0e 94 4b 02 	call	0x496	; 0x496 <updateReceiver>
		
		switch_vals = readSwitches();
 5ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <readSwitches>
 5b0:	80 93 07 30 	sts	0x3007, r24	; 0x803007 <switch_vals>
		bottom_straight_button_state	= bitREAD(switch_vals, 0);
 5b4:	68 2f       	mov	r22, r24
 5b6:	61 70       	andi	r22, 0x01	; 1
 5b8:	60 93 09 30 	sts	0x3009, r22	; 0x803009 <bottom_straight_button_state>
		up_cross_button_state			= bitREAD(switch_vals, 1);
 5bc:	81 fb       	bst	r24, 1
 5be:	99 27       	eor	r25, r25
 5c0:	90 f9       	bld	r25, 0
 5c2:	90 93 01 30 	sts	0x3001, r25	; 0x803001 <up_cross_button_state>
		down_cross_button_state			= bitREAD(switch_vals, 2);
 5c6:	82 fb       	bst	r24, 2
 5c8:	44 27       	eor	r20, r20
 5ca:	40 f9       	bld	r20, 0
 5cc:	40 93 00 30 	sts	0x3000, r20	; 0x803000 <_edata>
		top_straight_button_state		= bitREAD(switch_vals, 3);
 5d0:	83 fb       	bst	r24, 3
 5d2:	88 27       	eor	r24, r24
 5d4:	80 f9       	bld	r24, 0
 5d6:	80 93 02 30 	sts	0x3002, r24	; 0x803002 <top_straight_button_state>
		
		
		//updateRoutingState(&topRoutingUIState, top_straight_button_state, up_cross_button_state);
		updateRoutingState(&bottomRoutingUIState, bottom_straight_button_state, down_cross_button_state);
 5da:	85 e0       	ldi	r24, 0x05	; 5
 5dc:	90 e3       	ldi	r25, 0x30	; 48
 5de:	0e 94 1c 02 	call	0x438	; 0x438 <updateRoutingState>
 5e2:	2f ef       	ldi	r18, 0xFF	; 255
 5e4:	89 ef       	ldi	r24, 0xF9	; 249
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	21 50       	subi	r18, 0x01	; 1
 5ea:	80 40       	sbci	r24, 0x00	; 0
 5ec:	90 40       	sbci	r25, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <main+0xf4>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <main+0xfe>
 5f2:	00 00       	nop
 5f4:	c9 cf       	rjmp	.-110    	; 0x588 <main+0x94>

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
