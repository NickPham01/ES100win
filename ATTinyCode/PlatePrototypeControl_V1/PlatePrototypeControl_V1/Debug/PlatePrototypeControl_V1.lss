
PlatePrototypeControl_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00800040  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000919  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000692  00000000  00000000  00000bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d5  00000000  00000000  0000127f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001754  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000456  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b8  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001f36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	11 c0       	rjmp	.+34     	; 0x24 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>

00000024 <__ctors_end>:
  24:	11 27       	eor	r17, r17
  26:	1f bf       	out	0x3f, r17	; 63
  28:	cf e3       	ldi	r28, 0x3F	; 63
  2a:	d1 e0       	ldi	r29, 0x01	; 1
  2c:	de bf       	out	0x3e, r29	; 62
  2e:	cd bf       	out	0x3d, r28	; 61

00000030 <__do_clear_bss>:
  30:	20 e0       	ldi	r18, 0x00	; 0
  32:	a0 e4       	ldi	r26, 0x40	; 64
  34:	b0 e0       	ldi	r27, 0x00	; 0
  36:	01 c0       	rjmp	.+2      	; 0x3a <.do_clear_bss_start>

00000038 <.do_clear_bss_loop>:
  38:	1d 93       	st	X+, r17

0000003a <.do_clear_bss_start>:
  3a:	a0 34       	cpi	r26, 0x40	; 64
  3c:	b2 07       	cpc	r27, r18
  3e:	e1 f7       	brne	.-8      	; 0x38 <.do_clear_bss_loop>
  40:	82 d0       	rcall	.+260    	; 0x146 <main>
  42:	ad c0       	rjmp	.+346    	; 0x19e <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <initializeBlinker>:
		TCNT1L	= 0x00;					// reset the counter (low bit second)
		PORTC	^= (1<<LEDPIN);			// toggle the LED
		return 1;
	}
	return 0;
}
  46:	e0 9a       	sbi	0x1c, 0	; 28
  48:	44 b5       	in	r20, 0x24	; 36
  4a:	40 68       	ori	r20, 0x80	; 128
  4c:	44 bd       	out	0x24, r20	; 36
  4e:	44 b5       	in	r20, 0x24	; 36
  50:	42 60       	ori	r20, 0x02	; 2
  52:	44 bd       	out	0x24, r20	; 36
  54:	40 ef       	ldi	r20, 0xF0	; 240
  56:	41 bd       	out	0x21, r20	; 33
  58:	12 bd       	out	0x22, r17	; 34
  5a:	08 95       	ret

0000005c <setLED>:

void setLED(uint8_t status) {
	if (status) {
  5c:	88 23       	and	r24, r24
  5e:	11 f0       	breq	.+4      	; 0x64 <setLED+0x8>
		bitON(PORTC, LEDPIN);
  60:	e8 9a       	sbi	0x1d, 0	; 29
  62:	08 95       	ret
	}
	else {
		bitOFF(PORTC, LEDPIN);
  64:	e8 98       	cbi	0x1d, 0	; 29
  66:	08 95       	ret

00000068 <initializePins>:
/* uC Initializations                                                                     */
/************************************************************************/

void initializePins(void) {
	/* Set Vcc Select pins data direction to outputs */
	bitON(DDRA, VCC_SLT_9V_PIN);
  68:	09 9a       	sbi	0x01, 1	; 1
	bitON(DDRA, VCC_SLT_12V_PIN);
  6a:	08 9a       	sbi	0x01, 0	; 1
	
	/* Set relay driver pins data direction to outputs */
	bitON(DDRA, RLY_IN1_PIN);
  6c:	0b 9a       	sbi	0x01, 3	; 1
	bitON(DDRA, RLY_IN2_PIN);
  6e:	0a 9a       	sbi	0x01, 2	; 1
	
	/* Set plate detect pins data direction to inputs and enable pullups */
	bitOFF(DDRA, P_DETECT0_PIN);
  70:	0f 98       	cbi	0x01, 7	; 1
	bitOFF(DDRB, P_DETECT1_PIN);
  72:	28 98       	cbi	0x05, 0	; 5
	
	bitON(PUEA, P_DETECT0_PIN);
  74:	1f 9a       	sbi	0x03, 7	; 3
	bitON(PUEB, P_DETECT1_PIN);
  76:	38 9a       	sbi	0x07, 0	; 7
	
	/* Set power select pins data direction to inputs and enable pullups */
	bitOFF(DDRA, VCC_SLT_IN0_PIN);
  78:	0d 98       	cbi	0x01, 5	; 1
	bitOFF(DDRA, VCC_SLT_IN1_PIN);
  7a:	0e 98       	cbi	0x01, 6	; 1
	
	bitON(PUEA, VCC_SLT_IN0_PIN);
  7c:	1d 9a       	sbi	0x03, 5	; 3
	bitON(PUEA, VCC_SLT_IN1_PIN);
  7e:	1e 9a       	sbi	0x03, 6	; 3
  80:	08 95       	ret

00000082 <setVcc>:
/************************************************************************/
/* Vcc Control                                                                     */
/************************************************************************/
void setVcc(uint8_t voltage) {
	/* Set pins PA0 and PA1 (Vcc select) */
	switch(voltage) {
  82:	8c 30       	cpi	r24, 0x0C	; 12
  84:	39 f0       	breq	.+14     	; 0x94 <setVcc+0x12>
  86:	82 31       	cpi	r24, 0x12	; 18
  88:	41 f0       	breq	.+16     	; 0x9a <setVcc+0x18>
  8a:	89 30       	cpi	r24, 0x09	; 9
  8c:	49 f4       	brne	.+18     	; 0xa0 <setVcc+0x1e>
		case 9:							// can be combined with default
			// (PA0, PA1) = (0, 1)
			bitOFF(VCC_SLT_12V_PORT, VCC_SLT_12V_PIN);
  8e:	10 98       	cbi	0x02, 0	; 2
			bitON(VCC_SLT_9V_PORT, VCC_SLT_9V_PIN);
  90:	11 9a       	sbi	0x02, 1	; 2
			break;
  92:	08 95       	ret
		case 12:
			// (PA0, PA1) = (1, 0)
			bitON(VCC_SLT_12V_PORT, VCC_SLT_12V_PIN);
  94:	10 9a       	sbi	0x02, 0	; 2
			bitOFF(VCC_SLT_9V_PORT, VCC_SLT_9V_PIN);
  96:	11 98       	cbi	0x02, 1	; 2
			break;
  98:	08 95       	ret
		case 18:
			bitOFF(VCC_SLT_12V_PORT, VCC_SLT_12V_PIN);
  9a:	10 98       	cbi	0x02, 0	; 2
			bitOFF(VCC_SLT_9V_PORT, VCC_SLT_9V_PIN);
  9c:	11 98       	cbi	0x02, 1	; 2
			break;
  9e:	08 95       	ret
		default:
			// default to 9V for now
			bitOFF(VCC_SLT_12V_PORT, VCC_SLT_12V_PIN);
  a0:	10 98       	cbi	0x02, 0	; 2
			bitON(VCC_SLT_9V_PORT, VCC_SLT_9V_PIN);
  a2:	11 9a       	sbi	0x02, 1	; 2
  a4:	08 95       	ret

000000a6 <activateRelay>:
/*
 * Helper function for performing the relay switching.
 * Sets the voltage across the relay coil.
 */
void activateRelay(uint8_t relayState) {
	switch(relayState) {
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	39 f0       	breq	.+14     	; 0xb8 <activateRelay+0x12>
  aa:	18 f0       	brcs	.+6      	; 0xb2 <activateRelay+0xc>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	39 f0       	breq	.+14     	; 0xbe <activateRelay+0x18>
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <activateRelay+0x1e>
		case BYPASS:
			// (PA2, PA3) = (1, 0)
			bitON(RLY_IN2_PORT, RLY_IN2_PIN);
  b2:	12 9a       	sbi	0x02, 2	; 2
			bitOFF(RLY_IN1_PORT, RLY_IN1_PIN);
  b4:	13 98       	cbi	0x02, 3	; 2
			break;
  b6:	08 95       	ret
		case ACTIVE:
			// (PA2, PA3) = (0, 1)
			bitOFF(RLY_IN2_PORT, RLY_IN2_PIN);
  b8:	12 98       	cbi	0x02, 2	; 2
			bitON(RLY_IN1_PORT, RLY_IN1_PIN);
  ba:	13 9a       	sbi	0x02, 3	; 2
			break;
  bc:	08 95       	ret
		case IDLE:						// can be combined with default
			// (PA2, PA3) = (1, 1)
			bitON(RLY_IN2_PORT, RLY_IN2_PIN);
  be:	12 9a       	sbi	0x02, 2	; 2
			bitON(RLY_IN1_PORT, RLY_IN1_PIN);
  c0:	13 9a       	sbi	0x02, 3	; 2
			break;
  c2:	08 95       	ret
		default:
			// same as idle
			bitON(RLY_IN2_PORT, RLY_IN2_PIN);
  c4:	12 9a       	sbi	0x02, 2	; 2
			bitON(RLY_IN1_PORT, RLY_IN1_PIN);
  c6:	13 9a       	sbi	0x02, 3	; 2
  c8:	08 95       	ret

000000ca <setRelay>:
}

/*
 * Main relay switching function.  Call this one to set the relay
 */
void setRelay(uint8_t relayState) {
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
	activateRelay(relayState);	// engerize the relay coil in the derired direction
  ce:	eb df       	rcall	.-42     	; 0xa6 <activateRelay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	47 e8       	ldi	r20, 0x87	; 135
  d2:	53 e1       	ldi	r21, 0x13	; 19
  d4:	41 50       	subi	r20, 0x01	; 1
  d6:	50 40       	sbci	r21, 0x00	; 0
  d8:	e9 f7       	brne	.-6      	; 0xd4 <setRelay+0xa>
  da:	00 c0       	rjmp	.+0      	; 0xdc <setRelay+0x12>
  dc:	00 00       	nop
	_delay_ms(20);				// wait to ensure coil has been activated properly
	activateRelay(IDLE);		// set coil back to idle
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	e2 df       	rcall	.-60     	; 0xa6 <activateRelay>
	setLED(relayState);
  e2:	8c 2f       	mov	r24, r28
  e4:	bb df       	rcall	.-138    	; 0x5c <setLED>
}
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <readVccSwitch>:
/************************************************************************/

uint8_t readVccSwitch(void) {
	/* Read the sensors */
	uint8_t data = 0x00;
	data |= (PINA & (1<<VCC_SLT_IN0_PIN))>>VCC_SLT_IN0_PIN;			// set 0th bit
  ea:	50 b1       	in	r21, 0x00	; 0
	data |= ((PINA & (1<<VCC_SLT_IN1_PIN))>>VCC_SLT_IN1_PIN)<<1;	// set 1st bit
  ec:	40 b1       	in	r20, 0x00	; 0
	
	/* Decode data into desired voltage */
	switch(data) {
  ee:	46 fb       	bst	r20, 6
  f0:	66 27       	eor	r22, r22
  f2:	60 f9       	bld	r22, 0
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	55 fb       	bst	r21, 5
  fc:	55 27       	eor	r21, r21
  fe:	50 f9       	bld	r21, 0
 100:	46 2f       	mov	r20, r22
 102:	45 2b       	or	r20, r21
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	19 f0       	breq	.+6      	; 0x10e <__DATA_REGION_LENGTH__+0xe>
 108:	42 30       	cpi	r20, 0x02	; 2
 10a:	19 f0       	breq	.+6      	; 0x112 <__DATA_REGION_LENGTH__+0x12>
 10c:	04 c0       	rjmp	.+8      	; 0x116 <__DATA_REGION_LENGTH__+0x16>
		case 0x00:
		return 9;
		break;
		case 0x01:
		return 12;
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	08 95       	ret
		break;
		case 0x02:
		return 18;
 112:	82 e1       	ldi	r24, 0x12	; 18
 114:	08 95       	ret
	data |= ((PINA & (1<<VCC_SLT_IN1_PIN))>>VCC_SLT_IN1_PIN)<<1;	// set 1st bit
	
	/* Decode data into desired voltage */
	switch(data) {
		case 0x00:
		return 9;
 116:	89 e0       	ldi	r24, 0x09	; 9
		return 18;
		break;
		default:
		return 9;
	}
}
 118:	08 95       	ret

0000011a <readPlateSensor>:

uint8_t readPlateSensor(void) {
	
	/* Initialize and read the ports into the two lowest bits */
	uint8_t data = 0x00;
	data |= (PINA & (1<<P_DETECT0_PIN))>>P_DETECT0_PIN;			// set 0th bit
 11a:	40 b1       	in	r20, 0x00	; 0
	data |= ((PINB & (1<<P_DETECT1_PIN))>>P_DETECT1_PIN)<<1;	// set 1st bit
 11c:	54 b1       	in	r21, 0x04	; 4
 11e:	85 2f       	mov	r24, r21
 120:	81 70       	andi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	44 1f       	adc	r20, r20
 12a:	44 27       	eor	r20, r20
 12c:	44 1f       	adc	r20, r20
 12e:	84 2b       	or	r24, r20

	/*  The lowest two bits contain active low values of the plate sensor
		i.e. data = 0x03 if both switches are triggered and a plate is
		present.  Now invert these bits with XOR */
	data ^= 0x03;
	return data;
 130:	43 e0       	ldi	r20, 0x03	; 3
 132:	84 27       	eor	r24, r20
}
 134:	08 95       	ret

00000136 <checkForPlateChange>:
	
uint8_t checkForPlateChange(uint8_t prevKnownState) {
 136:	cf 93       	push	r28
 138:	c8 2f       	mov	r28, r24
	/*	There are only 2 sensors, using the 2 lowest bits of the state
		variable, so checkForPlateChange() returns UINT8_MAX (255) if the state
		hasn't changed. */
	
	uint8_t newState = readPlateSensor();
 13a:	ef df       	rcall	.-34     	; 0x11a <readPlateSensor>

	if (newState != prevKnownState) {
 13c:	8c 13       	cpse	r24, r28
 13e:	01 c0       	rjmp	.+2      	; 0x142 <__stack+0x3>
		return newState;
	}
	return UINT8_MAX;
 140:	8f ef       	ldi	r24, 0xFF	; 255
}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <main>:

/************************************************************************/
/* Main Function                                                                     */
/************************************************************************/
int main(void) {
	initializeBlinker();
 146:	7f df       	rcall	.-258    	; 0x46 <initializeBlinker>
	PORTC = 1<<LEDPIN;
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	4d bb       	out	0x1d, r20	; 29
	
	initializePins();
 14c:	8d df       	rcall	.-230    	; 0x68 <initializePins>
	setVcc(9);
 14e:	89 e0       	ldi	r24, 0x09	; 9
 150:	98 df       	rcall	.-208    	; 0x82 <setVcc>

	uint8_t relayState = BYPASS;
	setRelay(relayState);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	ba df       	rcall	.-140    	; 0xca <setRelay>
 156:	c4 e0       	ldi	r28, 0x04	; 4

	/* Indicate that the chip has been flashed */
	for (uint8_t i = 0; i < 4; i++) {
		setLED(1);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 df       	rcall	.-256    	; 0x5c <setLED>
 15c:	47 ea       	ldi	r20, 0xA7	; 167
 15e:	51 e6       	ldi	r21, 0x61	; 97
 160:	41 50       	subi	r20, 0x01	; 1
 162:	50 40       	sbci	r21, 0x00	; 0
 164:	e9 f7       	brne	.-6      	; 0x160 <main+0x1a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x22>
 168:	00 00       	nop
		_delay_ms(100);
		setLED(0);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	77 df       	rcall	.-274    	; 0x5c <setLED>
 16e:	47 ea       	ldi	r20, 0xA7	; 167
 170:	51 e6       	ldi	r21, 0x61	; 97
 172:	41 50       	subi	r20, 0x01	; 1
 174:	50 40       	sbci	r21, 0x00	; 0
 176:	e9 f7       	brne	.-6      	; 0x172 <main+0x2c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x34>
 17a:	00 00       	nop
 17c:	c1 50       	subi	r28, 0x01	; 1

	uint8_t relayState = BYPASS;
	setRelay(relayState);

	/* Indicate that the chip has been flashed */
	for (uint8_t i = 0; i < 4; i++) {
 17e:	61 f7       	brne	.-40     	; 0x158 <main+0x12>
 180:	de ef       	ldi	r29, 0xFE	; 254
	uint8_t prevPlateState = UINT8_MAX - 1;
	uint8_t newPlateState = 0;

	while(1) {
		// check if the state of the pins has changed
		newPlateState = checkForPlateChange(prevPlateState);
 182:	8d 2f       	mov	r24, r29
 184:	d8 df       	rcall	.-80     	; 0x136 <checkForPlateChange>
 186:	c8 2f       	mov	r28, r24
		if (newPlateState != UINT8_MAX) {
 188:	8f 3f       	cpi	r24, 0xFF	; 255
 18a:	d9 f3       	breq	.-10     	; 0x182 <main+0x3c>
inline uint8_t decodePlateState(uint8_t plateState) {
	return plateState == 0x03 ? ACTIVE : BYPASS;
}

inline void updateOutputs(uint8_t plateState) {
	setVcc(readVccSwitch());		// no need to de-bounce, since we've already waited for the plate detect pins to bounce
 18c:	ae df       	rcall	.-164    	; 0xea <readVccSwitch>
 18e:	79 df       	rcall	.-270    	; 0x82 <setVcc>
	setRelay(decodePlateState(plateState));
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	c3 30       	cpi	r28, 0x03	; 3
 194:	09 f0       	breq	.+2      	; 0x198 <main+0x52>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	98 df       	rcall	.-208    	; 0xca <setRelay>
	uint8_t prevPlateState = UINT8_MAX - 1;
	uint8_t newPlateState = 0;

	while(1) {
		// check if the state of the pins has changed
		newPlateState = checkForPlateChange(prevPlateState);
 19a:	dc 2f       	mov	r29, r28
 19c:	f2 cf       	rjmp	.-28     	; 0x182 <main+0x3c>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
