
PlatePrototypeControl_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00800040  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a7  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000630  00000000  00000000  00000b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a1  00000000  00000000  0000113b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020f  00000000  00000000  00001ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001cd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	11 c0       	rjmp	.+34     	; 0x24 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>

00000024 <__ctors_end>:
  24:	11 27       	eor	r17, r17
  26:	1f bf       	out	0x3f, r17	; 63
  28:	cf e3       	ldi	r28, 0x3F	; 63
  2a:	d1 e0       	ldi	r29, 0x01	; 1
  2c:	de bf       	out	0x3e, r29	; 62
  2e:	cd bf       	out	0x3d, r28	; 61

00000030 <__do_clear_bss>:
  30:	20 e0       	ldi	r18, 0x00	; 0
  32:	a0 e4       	ldi	r26, 0x40	; 64
  34:	b0 e0       	ldi	r27, 0x00	; 0
  36:	01 c0       	rjmp	.+2      	; 0x3a <.do_clear_bss_start>

00000038 <.do_clear_bss_loop>:
  38:	1d 93       	st	X+, r17

0000003a <.do_clear_bss_start>:
  3a:	a0 34       	cpi	r26, 0x40	; 64
  3c:	b2 07       	cpc	r27, r18
  3e:	e1 f7       	brne	.-8      	; 0x38 <.do_clear_bss_loop>
  40:	51 d0       	rcall	.+162    	; 0xe4 <main>
  42:	76 c0       	rjmp	.+236    	; 0x130 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <initializeBlinker>:
			return 18;
			break;
		default:
			return 9;
	}
}
  46:	e0 9a       	sbi	0x1c, 0	; 28
  48:	44 b5       	in	r20, 0x24	; 36
  4a:	40 68       	ori	r20, 0x80	; 128
  4c:	44 bd       	out	0x24, r20	; 36
  4e:	44 b5       	in	r20, 0x24	; 36
  50:	42 60       	ori	r20, 0x02	; 2
  52:	44 bd       	out	0x24, r20	; 36
  54:	40 ef       	ldi	r20, 0xF0	; 240
  56:	41 bd       	out	0x21, r20	; 33
  58:	12 bd       	out	0x22, r17	; 34
  5a:	08 95       	ret

0000005c <initializePins>:
  5c:	09 9a       	sbi	0x01, 1	; 1
  5e:	08 9a       	sbi	0x01, 0	; 1
  60:	0b 9a       	sbi	0x01, 3	; 1
  62:	0a 9a       	sbi	0x01, 2	; 1
  64:	0f 98       	cbi	0x01, 7	; 1
  66:	28 98       	cbi	0x05, 0	; 5
  68:	1f 9a       	sbi	0x03, 7	; 3
  6a:	38 9a       	sbi	0x07, 0	; 7
  6c:	08 95       	ret

0000006e <setLED>:
  6e:	88 23       	and	r24, r24
  70:	11 f0       	breq	.+4      	; 0x76 <setLED+0x8>
  72:	e8 9a       	sbi	0x1d, 0	; 29
  74:	08 95       	ret
  76:	e8 98       	cbi	0x1d, 0	; 29
  78:	08 95       	ret

0000007a <setVcc>:
  7a:	8c 30       	cpi	r24, 0x0C	; 12
  7c:	39 f0       	breq	.+14     	; 0x8c <setVcc+0x12>
  7e:	82 31       	cpi	r24, 0x12	; 18
  80:	41 f0       	breq	.+16     	; 0x92 <setVcc+0x18>
  82:	89 30       	cpi	r24, 0x09	; 9
  84:	49 f4       	brne	.+18     	; 0x98 <setVcc+0x1e>
  86:	10 98       	cbi	0x02, 0	; 2
  88:	11 9a       	sbi	0x02, 1	; 2
  8a:	08 95       	ret
  8c:	10 9a       	sbi	0x02, 0	; 2
  8e:	11 98       	cbi	0x02, 1	; 2
  90:	08 95       	ret
  92:	10 98       	cbi	0x02, 0	; 2
  94:	11 98       	cbi	0x02, 1	; 2
  96:	08 95       	ret
  98:	10 98       	cbi	0x02, 0	; 2
  9a:	11 9a       	sbi	0x02, 1	; 2
  9c:	08 95       	ret

0000009e <activateRelay>:
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	39 f0       	breq	.+14     	; 0xb0 <activateRelay+0x12>
  a2:	18 f0       	brcs	.+6      	; 0xaa <activateRelay+0xc>
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	39 f0       	breq	.+14     	; 0xb6 <activateRelay+0x18>
  a8:	09 c0       	rjmp	.+18     	; 0xbc <activateRelay+0x1e>
  aa:	12 9a       	sbi	0x02, 2	; 2
  ac:	13 98       	cbi	0x02, 3	; 2
  ae:	08 95       	ret
  b0:	12 98       	cbi	0x02, 2	; 2
  b2:	13 9a       	sbi	0x02, 3	; 2
  b4:	08 95       	ret
  b6:	12 9a       	sbi	0x02, 2	; 2
  b8:	13 9a       	sbi	0x02, 3	; 2
  ba:	08 95       	ret
  bc:	12 9a       	sbi	0x02, 2	; 2
  be:	13 9a       	sbi	0x02, 3	; 2
  c0:	08 95       	ret

000000c2 <setRelay>:
  c2:	ed df       	rcall	.-38     	; 0x9e <activateRelay>
  c4:	47 e8       	ldi	r20, 0x87	; 135
  c6:	53 e1       	ldi	r21, 0x13	; 19
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	50 40       	sbci	r21, 0x00	; 0
  cc:	e9 f7       	brne	.-6      	; 0xc8 <setRelay+0x6>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <setRelay+0xe>
  d0:	00 00       	nop
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	e4 df       	rcall	.-56     	; 0x9e <activateRelay>
  d6:	08 95       	ret

000000d8 <readPlateSensor>:
  d8:	82 b1       	in	r24, 0x02	; 2
  da:	46 b1       	in	r20, 0x06	; 6
  dc:	88 1f       	adc	r24, r24
  de:	88 27       	eor	r24, r24
  e0:	88 1f       	adc	r24, r24
  e2:	08 95       	ret

000000e4 <main>:

/************************************************************************/
/* Main Function                                                                     */
/************************************************************************/
int main(void) {
	initializeBlinker();
  e4:	b0 df       	rcall	.-160    	; 0x46 <initializeBlinker>
	PORTC = 1<<LEDPIN;
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	4d bb       	out	0x1d, r20	; 29
	
	initializePins();
  ea:	b8 df       	rcall	.-144    	; 0x5c <initializePins>
	setVcc(9);
  ec:	89 e0       	ldi	r24, 0x09	; 9
  ee:	c5 df       	rcall	.-118    	; 0x7a <setVcc>

	uint8_t relayState = BYPASS;
	setRelay(relayState);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	e7 df       	rcall	.-50     	; 0xc2 <setRelay>
  f4:	c4 e0       	ldi	r28, 0x04	; 4

	for (uint8_t i = 0; i < 4; i++) {
		setLED(1);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	ba df       	rcall	.-140    	; 0x6e <setLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	47 ea       	ldi	r20, 0xA7	; 167
  fc:	51 e6       	ldi	r21, 0x61	; 97
  fe:	41 50       	subi	r20, 0x01	; 1
 100:	50 40       	sbci	r21, 0x00	; 0
 102:	e9 f7       	brne	.-6      	; 0xfe <main+0x1a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__DATA_REGION_LENGTH__+0x6>
 106:	00 00       	nop
		_delay_ms(100);
		setLED(0);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	b1 df       	rcall	.-158    	; 0x6e <setLED>
 10c:	47 ea       	ldi	r20, 0xA7	; 167
 10e:	51 e6       	ldi	r21, 0x61	; 97
 110:	41 50       	subi	r20, 0x01	; 1
 112:	50 40       	sbci	r21, 0x00	; 0
 114:	e9 f7       	brne	.-6      	; 0x110 <__DATA_REGION_LENGTH__+0x10>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__DATA_REGION_LENGTH__+0x18>
 118:	00 00       	nop
 11a:	c1 50       	subi	r28, 0x01	; 1
	setVcc(9);

	uint8_t relayState = BYPASS;
	setRelay(relayState);

	for (uint8_t i = 0; i < 4; i++) {
 11c:	61 f7       	brne	.-40     	; 0xf6 <main+0x12>
		_delay_ms(100);
	}

	while(1) {

		if (readPlateSensor() != 0) {
 11e:	dc df       	rcall	.-72     	; 0xd8 <readPlateSensor>
 120:	88 23       	and	r24, r24
 122:	19 f0       	breq	.+6      	; 0x12a <__DATA_REGION_LENGTH__+0x2a>
			setLED(1);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	a3 df       	rcall	.-186    	; 0x6e <setLED>
 128:	fa cf       	rjmp	.-12     	; 0x11e <__DATA_REGION_LENGTH__+0x1e>
		}
		else {
			setLED(0);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	a0 df       	rcall	.-192    	; 0x6e <setLED>
 12e:	f7 cf       	rjmp	.-18     	; 0x11e <__DATA_REGION_LENGTH__+0x1e>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
